package parsing;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import com.maxmind.geoip2.*;

public class Parser {
	private File currentFile;
	private BufferedReader reader;//the current measurement file
	private BufferedReader ipReader;//the nodeIp file
	private BufferedReader locReader;//the nodeLocations file
	private BufferedWriter ipWriter;//writes to the nodeIp file
	private BufferedWriter locWriter;//writes to the nodeLocations file
	private HashMap<String, Double> results = new HashMap<String, Double>();
	private HashMap<String, Double> number = new HashMap<String, Double>();
	private HashMap<String, String> ipToCountry = new HashMap<String, String>();
	private ArrayList<String> both = new ArrayList<String>();
	private ArrayList<String> google = new ArrayList<String>();
	private ArrayList<String> opendns = new ArrayList<String>();
	public Parser(){//add all the countries with resolvers in them to the corresponding group
		both.add("NL");
		both.add("US");
		both.add("SG");
		google.add("TW");
		google.add("BE");
		google.add("FI");
		google.add("IE");
		google.add("CL");
		opendns.add("DE");
		opendns.add("FR");
		opendns.add("DK");
		opendns.add("CN");
		opendns.add("ZA");
		opendns.add("GB");
		opendns.add("RO");
		opendns.add("CZ");
		opendns.add("AU");
		opendns.add("PL");
		opendns.add("CA");
		opendns.add("JP");
		parse();
	}
	
	public void parse(){
		File folder = new File("src/openDNS");//change between openDNS and googleDNS depending on which to parse
		File[] listOfFiles = folder.listFiles();
		for(int i = 0; i<listOfFiles.length; i++){
			currentFile = listOfFiles[i];
			try {
				reader = new BufferedReader(new FileReader(currentFile));
				ipReader = new BufferedReader(new FileReader("src/nodeLocations/nodeIp"));
				String line = ipReader.readLine();//so the writers don't overwrite the already written data.
				locReader = new BufferedReader(new FileReader("src/nodeLocations/nodeLocations"));
				String line2 = locReader.readLine();
				ArrayList<String> ips = new ArrayList<String>();
				ArrayList<String> locs = new ArrayList<String>();
				while(line != null){//save all the node ip and locations to lists for later use
					ips.add(line);
					line = ipReader.readLine();
				}
				while(line2 != null){
					locs.add(line2);
					line2 = locReader.readLine();
				}
				ipWriter = new BufferedWriter(new FileWriter("src/nodeLocations/nodeIp"));
				locWriter = new BufferedWriter(new FileWriter("src/nodeLocations/nodeLocations"));
				for(int j = 0; j<ips.size() && j<locs.size(); j++){
					ipToCountry.put(ips.get(j), locs.get(j));
				}
				ipReader.close();
				locReader.close();
				String content = reader.readLine();
				String[] nodes = content.split('"' + "af");//splits the measurements in measurement per probe
				for(int j = 0; j<nodes.length; j++){
					String ip = "";
					String[] properties = nodes[j].split(",");//splits the measurement into its properties.
					for(int k = 0; k<properties.length; k++){
						if(properties[k].startsWith('"' + "from")){
							String rt = properties[k].replaceFirst('"' + "from" + '"' + ":" + '"', "");
							for(int l = 0; l<rt.length()-1; l++){
								ip = ip + rt.charAt(l);
							}
							if(!(ipToCountry.containsKey(ip))){//if it's a new ip, find the corresponding country and save them in the list
								ipToCountry.put(ip, getHTML(ip));
								ips.add(ip);
								locs.add(ipToCountry.get(ip));
							}
						}
						if(properties[k].startsWith('"' + "rt")){
							String rt = properties[k].replaceFirst('"' + "rt" + '"' + ":", "");
							Double rtt = Double.parseDouble(rt);
							if(results.containsKey(ip)){//ip was read earlier, always happens before the rt
								results.put(ip, results.get(ip) + rtt);
							} else {
								results.put(ip, rtt);
							}
							if(number.containsKey(ip)){
								number.put(ip, number.get(ip)+1);
							} else {
								number.put(ip, Double.valueOf(1));
							}
						}
					}
				}
				for(int k = 0; k<ips.size(); k++){//write the new ip and country lists to the original file
					ipWriter.write(ips.get(k) + '\n');
				}
				for(int k = 0; k<locs.size(); k++){
					locWriter.write(locs.get(k) + '\n');
				}
				reader.close();
				ipWriter.close();
				locWriter.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e){
				e.printStackTrace();
			}
		}//calculate average rtt
		HashMap<String, Double> rttPerCountry = new HashMap<String, Double>();
		HashMap<String, Double> resultsPerCountry = new HashMap<String, Double>();
		HashMap<String, Double> rttPerCategory = new HashMap<String, Double>();
		rttPerCategory.put("both", Double.valueOf(0));
		rttPerCategory.put("google", Double.valueOf(0));
		rttPerCategory.put("opendns", Double.valueOf(0));
		rttPerCategory.put("neither", Double.valueOf(0));
		HashMap<String, Double> resultsPerCategory = new HashMap<String, Double>();
		resultsPerCategory.put("both", Double.valueOf(0));
		resultsPerCategory.put("google", Double.valueOf(0));
		resultsPerCategory.put("opendns", Double.valueOf(0));
		resultsPerCategory.put("neither", Double.valueOf(0));
		Iterator<String> keys = results.keySet().iterator();
		String currentIP = "";
		String currentCountry = "";
		Double currentRTT;
		for(int i = 0; i<results.size(); i++){
			currentIP = keys.next();
			currentCountry = ipToCountry.get(currentIP);
			currentRTT = results.get(currentIP);
			if(!currentCountry.equals("EU")){//happens when the GeoIP lookup isn't accurate enough
			if(rttPerCountry.containsKey(currentCountry)){
				rttPerCountry.put(currentCountry, rttPerCountry.get(currentCountry) + (currentRTT));
				resultsPerCountry.put(currentCountry, resultsPerCountry.get(currentCountry)+number.get(currentIP));
			} else {
				rttPerCountry.put(currentCountry, currentRTT);
				resultsPerCountry.put(currentCountry, number.get(currentIP));
			}
			}
		}
		keys = resultsPerCountry.keySet().iterator();
		for(int i = 0; i<resultsPerCountry.size(); i++){
			currentCountry = keys.next();
			if(both.contains(currentCountry)){
				rttPerCategory.put("both", rttPerCategory.get("both") + rttPerCountry.get(currentCountry));
				resultsPerCategory.put("both", resultsPerCategory.get("both") + resultsPerCountry.get(currentCountry));
			} else if(google.contains(currentCountry)){
				rttPerCategory.put("google", rttPerCategory.get("google") + rttPerCountry.get(currentCountry));
				resultsPerCategory.put("google", resultsPerCategory.get("google") + resultsPerCountry.get(currentCountry));
			} else if(opendns.contains(currentCountry)){
				rttPerCategory.put("opendns", rttPerCategory.get("opendns") + rttPerCountry.get(currentCountry));
				resultsPerCategory.put("opendns", resultsPerCategory.get("opendns") + resultsPerCountry.get(currentCountry));
			} else {
				rttPerCategory.put("neither", rttPerCategory.get("neither") + rttPerCountry.get(currentCountry));
				resultsPerCategory.put("neither", resultsPerCategory.get("neither") + resultsPerCountry.get(currentCountry));
			}
		}
		keys = rttPerCountry.keySet().iterator();
		for(int i = 0; i<rttPerCountry.size(); i++){//print results per country
			currentCountry = keys.next();
			System.out.println(currentCountry + ": " + rttPerCountry.get(currentCountry)/resultsPerCountry.get(currentCountry) + " " + resultsPerCountry.get(currentCountry));
		}
		keys = rttPerCategory.keySet().iterator();
		String currentCategory;
		for(int i = 0; i<rttPerCategory.size(); i++){//print results per category
			currentCategory = keys.next();
			System.out.println(currentCategory + ": " + rttPerCategory.get(currentCategory)/resultsPerCategory.get(currentCategory));
		}
	}
	
	/**
	 * @param ip the ip to be located
	 * @return the country @ip is located
	 */
	public String getHTML(String ip) {
	      URL url;
	      HttpURLConnection conn;
	      BufferedReader rd;
	      String line;
	      String result = "";
	      try {
	    	 String url_str = "http://www.ipinfo.io/" + ip + "/country";//ipinfo is linked to the GeoIp database(1000 requests per day)
	         url = new URL(url_str);
	         conn = (HttpURLConnection) url.openConnection();
	         conn.setRequestMethod("GET");
	         rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	         while ((line = rd.readLine()) != null) {
	            result += line;
	         }
	         rd.close();
	      } catch (IOException e) {
	         e.printStackTrace();
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	      return result;
	   }
	
	public static void main(String[] args){
		new Parser();
	}
}
